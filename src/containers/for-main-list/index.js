
import React, {useEffect} from 'react';
import { connect } from 'react-redux';

import { withService } from '../hoc';
import {fetchItemsFromService, addItem, inc, dec} from '../../actions';

import {MainList} from '../../components/lists';
import Loader from '../../components/loader'
import ErrorIndicator from '../../components/error/error-indicator';



const ForMainList = ({fetchItems, items, load, err, callAdd, inc, dec}) => {

    useEffect(()=>{
        fetchItems()
        //itemsLoaded was generated by mapDispatchToProps for dispatching in store data from service
}, [])
    
    if(load){
        return <Loader/>
    }
    if(err){
        return <ErrorIndicator/>
    }
    return <MainList items={items} callAdd={callAdd} inc={inc} dec={dec}/>
  
}

const mapStateToProps = ({items, load, err}) => { 
    return {items, load, err};
}
const mapDispatchToProps = (dispatch, {marketService}) =>{
    return { 
        fetchItems: fetchItemsFromService(marketService, dispatch),
        callAdd: id => {dispatch(addItem(id))},
        dec: id => {dispatch(dec(id))},
        inc: id => {dispatch(inc(id))}
}
}
//This object is shorthened implementation of fucntion bindActionCrators
const childConnect = connect(mapStateToProps, mapDispatchToProps)(ForMainList);
//firstly, wrapp item-list component in context-function for connecting with redux;
export default withService()(childConnect);
// and then wrapp wrapped component in hoc for connecting with service